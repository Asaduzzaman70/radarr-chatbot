import React, { use, useCallback } from 'react';
import { isThenable } from '../../shared/lib/is-thenable';
export function useUnwrapState(state) {
    // reducer actions can be async, so sometimes we need to suspend until the state is resolved
    if (isThenable(state)) {
        const result = use(state);
        return result;
    }
    return state;
}
export function useReducer(actionQueue) {
    const [state, setState] = React.useState(actionQueue.state);
    const actionDispatch = (action)=>{
        actionQueue.dispatch(action, setState);
    };
    let syncDevRenderIndicator;
    if (process.env.NODE_ENV !== 'production') {
        const useSyncDevRenderIndicator = require('./react-dev-overlay/utils/dev-indicator/use-sync-dev-render-indicator').useSyncDevRenderIndicator;
        // eslint-disable-next-line react-hooks/rules-of-hooks
        syncDevRenderIndicator = useSyncDevRenderIndicator();
    }
    const dispatchCallback = process.env.NODE_ENV !== 'production' ? (action)=>{
        syncDevRenderIndicator(()=>actionDispatch(action));
    } : actionDispatch;
    const dispatch = useCallback(dispatchCallback, [
        actionQueue,
        dispatchCallback,
        syncDevRenderIndicator
    ]);
    return [
        state,
        dispatch
    ];
}

//# sourceMappingURL=use-reducer.js.map